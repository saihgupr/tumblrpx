import { S as SvelteComponentDev, i as init, s as safe_not_equal, d as dispatch_dev, a as validate_slots, b as stores$1, v as validate_store, c as component_subscribe, l as create_component, m as claim_component, n as mount_component, t as transition_in, h as transition_out, o as destroy_component } from './client.12e22d7a.js';
import { F as FullscreenLayout } from './FullscreenLayout.25c9beff.js';
import './Settings.42eed5af.js';
import './faHome.79de4fe2.js';

/* src/routes/t/[slug]/[slug].svelte generated by Svelte v3.59.2 */

function create_fragment(ctx) {
	let fullscreenlayout;
	let current;

	fullscreenlayout = new FullscreenLayout({
			props: {
				slugstr: /*slugstr*/ ctx[0],
				params: /*$page*/ ctx[1].query
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			create_component(fullscreenlayout.$$.fragment);
		},
		l: function claim(nodes) {
			claim_component(fullscreenlayout.$$.fragment, nodes);
		},
		m: function mount(target, anchor) {
			mount_component(fullscreenlayout, target, anchor);
			current = true;
		},
		p: function update(ctx, [dirty]) {
			const fullscreenlayout_changes = {};
			if (dirty & /*slugstr*/ 1) fullscreenlayout_changes.slugstr = /*slugstr*/ ctx[0];
			if (dirty & /*$page*/ 2) fullscreenlayout_changes.params = /*$page*/ ctx[1].query;
			fullscreenlayout.$set(fullscreenlayout_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(fullscreenlayout.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(fullscreenlayout.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(fullscreenlayout, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance($$self, $$props, $$invalidate) {
	let $page;
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots('U5Bslugu5D', slots, []);
	const { page } = stores$1();
	validate_store(page, 'page');
	component_subscribe($$self, page, value => $$invalidate(1, $page = value));
	let { slugstr = $page.params.slug } = $$props;
	const writable_props = ['slugstr'];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<U5Bslugu5D> was created with unknown prop '${key}'`);
	});

	$$self.$$set = $$props => {
		if ('slugstr' in $$props) $$invalidate(0, slugstr = $$props.slugstr);
	};

	$$self.$capture_state = () => ({
		FullscreenLayout,
		stores: stores$1,
		page,
		slugstr,
		$page
	});

	$$self.$inject_state = $$props => {
		if ('slugstr' in $$props) $$invalidate(0, slugstr = $$props.slugstr);
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	return [slugstr, $page, page];
}

class U5Bslugu5D extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance, create_fragment, safe_not_equal, { slugstr: 0 });

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "U5Bslugu5D",
			options,
			id: create_fragment.name
		});
	}

	get slugstr() {
		throw new Error("<U5Bslugu5D>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set slugstr(value) {
		throw new Error("<U5Bslugu5D>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

export { U5Bslugu5D as default };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiX3NsdWdfLjIzYjhkNjczLmpzIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvcm91dGVzL3QvW3NsdWddL1tzbHVnXS5zdmVsdGUiXSwic291cmNlc0NvbnRlbnQiOlsiPHNjcmlwdD5cbiAgaW1wb3J0IEZ1bGxzY3JlZW5MYXlvdXQgZnJvbSBcIi4uLy4uLy4uL2NvbXBvbmVudHMvRnVsbHNjcmVlbkxheW91dC5zdmVsdGVcIjtcbiAgaW1wb3J0IHsgc3RvcmVzIH0gZnJvbSBcIkBzYXBwZXIvYXBwXCI7XG4gIGNvbnN0IHsgcGFnZSB9ID0gc3RvcmVzKCk7XG5cbiAgZXhwb3J0IGxldCBzbHVnc3RyID0gJHBhZ2UucGFyYW1zLnNsdWc7XG48L3NjcmlwdD5cblxuPEZ1bGxzY3JlZW5MYXlvdXQge3NsdWdzdHJ9IHBhcmFtcz17JHBhZ2UucXVlcnl9IC8+XG4iXSwibmFtZXMiOlsic3RvcmVzIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7OztBQVFvQyxJQUFBLE1BQUEsWUFBQSxHQUFLLElBQUMsS0FBSzs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUFYLEdBQUEsSUFBQSxLQUFBLGFBQUEsQ0FBQSxFQUFBLHdCQUFBLENBQUEsTUFBQSxhQUFBLEdBQUssSUFBQyxLQUFLLENBQUE7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBTHJDLENBQUEsTUFBQSxFQUFBLElBQUksS0FBS0EsUUFBTSxFQUFBLENBQUE7OztBQUVaLENBQUEsSUFBQSxFQUFBLE9BQU8sR0FBRyxLQUFLLENBQUMsTUFBTSxDQUFDLElBQUksRUFBQSxHQUFBLE9BQUEsQ0FBQTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OyJ9
