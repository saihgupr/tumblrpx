import { S as SvelteComponentDev, i as init, s as safe_not_equal, d as dispatch_dev, a as validate_slots, B as element, P as text, E as claim_element, F as children, Q as claim_text, k as detach_dev, G as attr_dev, I as add_location, f as insert_hydration_dev, J as append_hydration_dev, _ as noop } from './client.af19a8be.js';

/* src/routes/health.svelte generated by Svelte v3.59.2 */

const file = "src/routes/health.svelte";

function create_fragment(ctx) {
	let p;
	let t;

	const block = {
		c: function create() {
			p = element("p");
			t = text("OK");
			this.h();
		},
		l: function claim(nodes) {
			p = claim_element(nodes, "P", { class: true });
			var p_nodes = children(p);
			t = claim_text(p_nodes, "OK");
			p_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(p, "class", "svelte-1nb2zc2");
			add_location(p, file, 1, 2, 3);
		},
		m: function mount(target, anchor) {
			insert_hydration_dev(target, p, anchor);
			append_hydration_dev(p, t);
		},
		p: noop,
		i: noop,
		o: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(p);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance($$self, $$props) {
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots('Health', slots, []);
	const writable_props = [];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<Health> was created with unknown prop '${key}'`);
	});

	return [];
}

class Health extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance, create_fragment, safe_not_equal, {});

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "Health",
			options,
			id: create_fragment.name
		});
	}
}

export { Health as default };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGVhbHRoLjhlNzYwMWJjLmpzIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvcm91dGVzL2hlYWx0aC5zdmVsdGUiXSwic291cmNlc0NvbnRlbnQiOlsiPHRlbXBsYXRlPlxuICA8cD5PSzwvcD5cbjwvdGVtcGxhdGU+XG5cbjxzdHlsZT5cbiAgcCB7XG4gICAgY29sb3I6IHdoaXRlO1xuICB9XG48L3N0eWxlPlxuIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7WUFDSyxJQUFFLENBQUEsQ0FBQTs7Ozs7OzJCQUFGLElBQUUsQ0FBQSxDQUFBOzs7Ozs7Ozs7R0FBTCxvQkFBUSxDQUFBLE1BQUEsRUFBQSxDQUFBLEVBQUEsTUFBQSxDQUFBLENBQUE7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OyJ9
