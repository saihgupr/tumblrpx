import { S as SvelteComponentDev, i as init, s as safe_not_equal, d as dispatch_dev, y as validate_each_argument, v as validate_store, c as component_subscribe, a as validate_slots, x as globals, A as space, B as element, P as text, l as create_component, C as head_selector, k as detach_dev, D as claim_space, E as claim_element, F as children, Q as claim_text, m as claim_component, G as attr_dev, W as src_url_equal, I as add_location, H as toggle_class, f as insert_hydration_dev, J as append_hydration_dev, $ as set_input_value, n as mount_component, K as listen_dev, R as set_data_dev, t as transition_in, h as transition_out, o as destroy_component, a9 as destroy_each, M as run_all, e as empty } from './client.692eab8d.js';
import { I as Icon, b as faCog, S as Settings, f as favorite, t as faCloudDownloadAlt } from './Settings.691d7972.js';
import { f as faHome } from './faHome.e3a1bf4c.js';

/* src/routes/download.svelte generated by Svelte v3.59.2 */

const { Object: Object_1 } = globals;
const file = "src/routes/download.svelte";

function get_each_context(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[6] = list[i][0];
	child_ctx[7] = list[i][1];
	return child_ctx;
}

function get_each_context_1(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[10] = list[i];
	return child_ctx;
}

// (42:1267) 
function create_if_block_3(ctx) {
	let div;
	let video;
	let if_block0_anchor;
	let if_block0 = /*post*/ ctx[7].preview.vid.webm && create_if_block_5(ctx);
	let if_block1 = /*post*/ ctx[7].preview.vid.mp4 && create_if_block_4(ctx);

	const block = {
		c: function create() {
			div = element("div");
			video = element("video");
			if (if_block0) if_block0.c();
			if_block0_anchor = empty();
			if (if_block1) if_block1.c();
			this.h();
		},
		l: function claim(nodes) {
			div = claim_element(nodes, "DIV", { class: true });
			var div_nodes = children(div);
			video = claim_element(div_nodes, "VIDEO", { class: true });
			var video_nodes = children(video);
			if (if_block0) if_block0.l(video_nodes);
			if_block0_anchor = empty();
			if (if_block1) if_block1.l(video_nodes);
			video_nodes.forEach(detach_dev);
			div_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			video.autoplay = true;
			video.loop = true;
			video.playsInline = true;
			video.muted = true;
			attr_dev(video, "class", "svelte-dk7jlv");
			add_location(video, file, 41, 1286, 2376);
			attr_dev(div, "class", "media svelte-dk7jlv");
			add_location(div, file, 41, 1267, 2357);
		},
		m: function mount(target, anchor) {
			insert_hydration_dev(target, div, anchor);
			append_hydration_dev(div, video);
			if (if_block0) if_block0.m(video, null);
			append_hydration_dev(video, if_block0_anchor);
			if (if_block1) if_block1.m(video, null);
		},
		p: function update(ctx, dirty) {
			if (/*post*/ ctx[7].preview.vid.webm) {
				if (if_block0) {
					if_block0.p(ctx, dirty);
				} else {
					if_block0 = create_if_block_5(ctx);
					if_block0.c();
					if_block0.m(video, if_block0_anchor);
				}
			} else if (if_block0) {
				if_block0.d(1);
				if_block0 = null;
			}

			if (/*post*/ ctx[7].preview.vid.mp4) {
				if (if_block1) {
					if_block1.p(ctx, dirty);
				} else {
					if_block1 = create_if_block_4(ctx);
					if_block1.c();
					if_block1.m(video, null);
				}
			} else if (if_block1) {
				if_block1.d(1);
				if_block1 = null;
			}
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(div);
			if (if_block0) if_block0.d();
			if (if_block1) if_block1.d();
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_3.name,
		type: "if",
		source: "(42:1267) ",
		ctx
	});

	return block;
}

// (42:1189) 
function create_if_block_2(ctx) {
	let div;
	let img;
	let img_src_value;

	const block = {
		c: function create() {
			div = element("div");
			img = element("img");
			this.h();
		},
		l: function claim(nodes) {
			div = claim_element(nodes, "DIV", { class: true });
			var div_nodes = children(div);
			img = claim_element(div_nodes, "IMG", { alt: true, src: true, class: true });
			div_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(img, "alt", "image");
			if (!src_url_equal(img.src, img_src_value = /*url*/ ctx[6])) attr_dev(img, "src", img_src_value);
			attr_dev(img, "class", "svelte-dk7jlv");
			add_location(img, file, 41, 1208, 2298);
			attr_dev(div, "class", "media svelte-dk7jlv");
			add_location(div, file, 41, 1189, 2279);
		},
		m: function mount(target, anchor) {
			insert_hydration_dev(target, div, anchor);
			append_hydration_dev(div, img);
		},
		p: function update(ctx, dirty) {
			if (dirty & /*displayposts*/ 4 && !src_url_equal(img.src, img_src_value = /*url*/ ctx[6])) {
				attr_dev(img, "src", img_src_value);
			}
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(div);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_2.name,
		type: "if",
		source: "(42:1189) ",
		ctx
	});

	return block;
}

// (42:906) {#if post.is_album}
function create_if_block(ctx) {
	let each_1_anchor;
	let each_value_1 = /*post*/ ctx[7].preview.img.album;
	validate_each_argument(each_value_1);
	let each_blocks = [];

	for (let i = 0; i < each_value_1.length; i += 1) {
		each_blocks[i] = create_each_block_1(get_each_context_1(ctx, each_value_1, i));
	}

	const block = {
		c: function create() {
			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			each_1_anchor = empty();
		},
		l: function claim(nodes) {
			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].l(nodes);
			}

			each_1_anchor = empty();
		},
		m: function mount(target, anchor) {
			for (let i = 0; i < each_blocks.length; i += 1) {
				if (each_blocks[i]) {
					each_blocks[i].m(target, anchor);
				}
			}

			insert_hydration_dev(target, each_1_anchor, anchor);
		},
		p: function update(ctx, dirty) {
			if (dirty & /*displayposts*/ 4) {
				each_value_1 = /*post*/ ctx[7].preview.img.album;
				validate_each_argument(each_value_1);
				let i;

				for (i = 0; i < each_value_1.length; i += 1) {
					const child_ctx = get_each_context_1(ctx, each_value_1, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
					} else {
						each_blocks[i] = create_each_block_1(child_ctx);
						each_blocks[i].c();
						each_blocks[i].m(each_1_anchor.parentNode, each_1_anchor);
					}
				}

				for (; i < each_blocks.length; i += 1) {
					each_blocks[i].d(1);
				}

				each_blocks.length = each_value_1.length;
			}
		},
		d: function destroy(detaching) {
			destroy_each(each_blocks, detaching);
			if (detaching) detach_dev(each_1_anchor);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block.name,
		type: "if",
		source: "(42:906) {#if post.is_album}",
		ctx
	});

	return block;
}

// (42:1325) {#if post.preview.vid.webm}
function create_if_block_5(ctx) {
	let source;
	let source_src_value;

	const block = {
		c: function create() {
			source = element("source");
			this.h();
		},
		l: function claim(nodes) {
			source = claim_element(nodes, "SOURCE", { src: true });
			this.h();
		},
		h: function hydrate() {
			if (!src_url_equal(source.src, source_src_value = /*post*/ ctx[7].preview.vid.webm)) attr_dev(source, "src", source_src_value);
			add_location(source, file, 41, 1352, 2442);
		},
		m: function mount(target, anchor) {
			insert_hydration_dev(target, source, anchor);
		},
		p: function update(ctx, dirty) {
			if (dirty & /*displayposts*/ 4 && !src_url_equal(source.src, source_src_value = /*post*/ ctx[7].preview.vid.webm)) {
				attr_dev(source, "src", source_src_value);
			}
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(source);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_5.name,
		type: "if",
		source: "(42:1325) {#if post.preview.vid.webm}",
		ctx
	});

	return block;
}

// (42:1395) {#if post.preview.vid.mp4}
function create_if_block_4(ctx) {
	let source;
	let source_src_value;

	const block = {
		c: function create() {
			source = element("source");
			this.h();
		},
		l: function claim(nodes) {
			source = claim_element(nodes, "SOURCE", { src: true });
			this.h();
		},
		h: function hydrate() {
			if (!src_url_equal(source.src, source_src_value = /*post*/ ctx[7].preview.vid.mp4)) attr_dev(source, "src", source_src_value);
			add_location(source, file, 41, 1421, 2511);
		},
		m: function mount(target, anchor) {
			insert_hydration_dev(target, source, anchor);
		},
		p: function update(ctx, dirty) {
			if (dirty & /*displayposts*/ 4 && !src_url_equal(source.src, source_src_value = /*post*/ ctx[7].preview.vid.mp4)) {
				attr_dev(source, "src", source_src_value);
			}
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(source);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_4.name,
		type: "if",
		source: "(42:1395) {#if post.preview.vid.mp4}",
		ctx
	});

	return block;
}

// (42:1046) {:else}
function create_else_block(ctx) {
	let div;
	let video;
	let source;
	let source_src_value;

	const block = {
		c: function create() {
			div = element("div");
			video = element("video");
			source = element("source");
			this.h();
		},
		l: function claim(nodes) {
			div = claim_element(nodes, "DIV", { class: true });
			var div_nodes = children(div);
			video = claim_element(div_nodes, "VIDEO", { class: true });
			var video_nodes = children(video);
			source = claim_element(video_nodes, "SOURCE", { src: true });
			video_nodes.forEach(detach_dev);
			div_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			if (!src_url_equal(source.src, source_src_value = /*album*/ ctx[10].hires)) attr_dev(source, "src", source_src_value);
			add_location(source, file, 41, 1111, 2201);
			video.autoplay = true;
			video.loop = true;
			video.playsInline = true;
			video.muted = true;
			attr_dev(video, "class", "svelte-dk7jlv");
			add_location(video, file, 41, 1072, 2162);
			attr_dev(div, "class", "media svelte-dk7jlv");
			add_location(div, file, 41, 1053, 2143);
		},
		m: function mount(target, anchor) {
			insert_hydration_dev(target, div, anchor);
			append_hydration_dev(div, video);
			append_hydration_dev(video, source);
		},
		p: function update(ctx, dirty) {
			if (dirty & /*displayposts*/ 4 && !src_url_equal(source.src, source_src_value = /*album*/ ctx[10].hires)) {
				attr_dev(source, "src", source_src_value);
			}
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(div);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_else_block.name,
		type: "else",
		source: "(42:1046) {:else}",
		ctx
	});

	return block;
}

// (42:964) {#if album.is_image}
function create_if_block_1(ctx) {
	let div;
	let img;
	let img_src_value;

	const block = {
		c: function create() {
			div = element("div");
			img = element("img");
			this.h();
		},
		l: function claim(nodes) {
			div = claim_element(nodes, "DIV", { class: true });
			var div_nodes = children(div);
			img = claim_element(div_nodes, "IMG", { alt: true, src: true, class: true });
			div_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(img, "alt", "image");
			if (!src_url_equal(img.src, img_src_value = /*album*/ ctx[10].hires)) attr_dev(img, "src", img_src_value);
			attr_dev(img, "class", "svelte-dk7jlv");
			add_location(img, file, 41, 1003, 2093);
			attr_dev(div, "class", "media svelte-dk7jlv");
			add_location(div, file, 41, 984, 2074);
		},
		m: function mount(target, anchor) {
			insert_hydration_dev(target, div, anchor);
			append_hydration_dev(div, img);
		},
		p: function update(ctx, dirty) {
			if (dirty & /*displayposts*/ 4 && !src_url_equal(img.src, img_src_value = /*album*/ ctx[10].hires)) {
				attr_dev(img, "src", img_src_value);
			}
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(div);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_1.name,
		type: "if",
		source: "(42:964) {#if album.is_image}",
		ctx
	});

	return block;
}

// (42:925) {#each post.preview.img.album as album}
function create_each_block_1(ctx) {
	let if_block_anchor;

	function select_block_type_1(ctx, dirty) {
		if (/*album*/ ctx[10].is_image) return create_if_block_1;
		return create_else_block;
	}

	let current_block_type = select_block_type_1(ctx);
	let if_block = current_block_type(ctx);

	const block = {
		c: function create() {
			if_block.c();
			if_block_anchor = empty();
		},
		l: function claim(nodes) {
			if_block.l(nodes);
			if_block_anchor = empty();
		},
		m: function mount(target, anchor) {
			if_block.m(target, anchor);
			insert_hydration_dev(target, if_block_anchor, anchor);
		},
		p: function update(ctx, dirty) {
			if (current_block_type === (current_block_type = select_block_type_1(ctx)) && if_block) {
				if_block.p(ctx, dirty);
			} else {
				if_block.d(1);
				if_block = current_block_type(ctx);

				if (if_block) {
					if_block.c();
					if_block.m(if_block_anchor.parentNode, if_block_anchor);
				}
			}
		},
		d: function destroy(detaching) {
			if_block.d(detaching);
			if (detaching) detach_dev(if_block_anchor);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_each_block_1.name,
		type: "each",
		source: "(42:925) {#each post.preview.img.album as album}",
		ctx
	});

	return block;
}

// (42:871) {#each displayposts as [url, post]}
function create_each_block(ctx) {
	let if_block_anchor;

	function select_block_type(ctx, dirty) {
		if (/*post*/ ctx[7].is_album) return create_if_block;
		if (/*post*/ ctx[7].is_image) return create_if_block_2;
		if (/*post*/ ctx[7].is_video) return create_if_block_3;
	}

	let current_block_type = select_block_type(ctx);
	let if_block = current_block_type && current_block_type(ctx);

	const block = {
		c: function create() {
			if (if_block) if_block.c();
			if_block_anchor = empty();
		},
		l: function claim(nodes) {
			if (if_block) if_block.l(nodes);
			if_block_anchor = empty();
		},
		m: function mount(target, anchor) {
			if (if_block) if_block.m(target, anchor);
			insert_hydration_dev(target, if_block_anchor, anchor);
		},
		p: function update(ctx, dirty) {
			if (current_block_type === (current_block_type = select_block_type(ctx)) && if_block) {
				if_block.p(ctx, dirty);
			} else {
				if (if_block) if_block.d(1);
				if_block = current_block_type && current_block_type(ctx);

				if (if_block) {
					if_block.c();
					if_block.m(if_block_anchor.parentNode, if_block_anchor);
				}
			}
		},
		d: function destroy(detaching) {
			if (if_block) {
				if_block.d(detaching);
			}

			if (detaching) detach_dev(if_block_anchor);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_each_block.name,
		type: "each",
		source: "(42:871) {#each displayposts as [url, post]}",
		ctx
	});

	return block;
}

function create_fragment(ctx) {
	let t0;
	let div6;
	let div5;
	let div2;
	let span0;
	let img;
	let img_src_value;
	let t1;

	let t2_value = (/*$favorite*/ ctx[1]
	? `(${Object.keys(/*$favorite*/ ctx[1]).length} items)`
	: '') + "";

	let t2;
	let div0;
	let p0;
	let t3;
	let p1;
	let t4;
	let div1;
	let span1;
	let t5;
	let t6_value = /*displayposts*/ ctx[2].length + "";
	let t6;
	let t7;
	let input;
	let div3;
	let a;
	let span2;
	let icon0;
	let span3;
	let icon1;
	let settings;
	let div4;
	let current;
	let mounted;
	let dispose;
	icon0 = new Icon({ props: { icon: faHome.faHome }, $$inline: true });

	icon1 = new Icon({
			props: { icon: faCog.faCog },
			$$inline: true
		});

	settings = new Settings({
			props: { showSettings: /*showSettings*/ ctx[3] },
			$$inline: true
		});

	let each_value = /*displayposts*/ ctx[2];
	validate_each_argument(each_value);
	let each_blocks = [];

	for (let i = 0; i < each_value.length; i += 1) {
		each_blocks[i] = create_each_block(get_each_context(ctx, each_value, i));
	}

	const block = {
		c: function create() {
			t0 = space();
			div6 = element("div");
			div5 = element("div");
			div2 = element("div");
			span0 = element("span");
			img = element("img");
			t1 = text("tumblrpx download ");
			t2 = text(t2_value);
			div0 = element("div");
			p0 = element("p");
			t3 = text("Right click on the page (not on any image) > Save as > Select \"Webpage, Complete\".");
			p1 = element("p");
			t4 = text("Alternatively, hit Ctrl+S > Select \"Webpage, Complete\"");
			div1 = element("div");
			span1 = element("span");
			t5 = text("Filter (");
			t6 = text(t6_value);
			t7 = text(")");
			input = element("input");
			div3 = element("div");
			a = element("a");
			span2 = element("span");
			create_component(icon0.$$.fragment);
			span3 = element("span");
			create_component(icon1.$$.fragment);
			create_component(settings.$$.fragment);
			div4 = element("div");

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			this.h();
		},
		l: function claim(nodes) {
			const head_nodes = head_selector('svelte-9dhkvy', document.head);
			head_nodes.forEach(detach_dev);
			t0 = claim_space(nodes);
			div6 = claim_element(nodes, "DIV", { class: true });
			var div6_nodes = children(div6);
			div5 = claim_element(div6_nodes, "DIV", { class: true });
			var div5_nodes = children(div5);
			div2 = claim_element(div5_nodes, "DIV", { class: true });
			var div2_nodes = children(div2);
			span0 = claim_element(div2_nodes, "SPAN", { class: true });
			var span0_nodes = children(span0);
			img = claim_element(span0_nodes, "IMG", { alt: true, src: true, class: true });
			span0_nodes.forEach(detach_dev);
			t1 = claim_text(div2_nodes, "tumblrpx download ");
			t2 = claim_text(div2_nodes, t2_value);
			div0 = claim_element(div2_nodes, "DIV", { class: true });
			var div0_nodes = children(div0);
			p0 = claim_element(div0_nodes, "P", { class: true });
			var p0_nodes = children(p0);
			t3 = claim_text(p0_nodes, "Right click on the page (not on any image) > Save as > Select \"Webpage, Complete\".");
			p0_nodes.forEach(detach_dev);
			p1 = claim_element(div0_nodes, "P", { class: true });
			var p1_nodes = children(p1);
			t4 = claim_text(p1_nodes, "Alternatively, hit Ctrl+S > Select \"Webpage, Complete\"");
			p1_nodes.forEach(detach_dev);
			div0_nodes.forEach(detach_dev);
			div1 = claim_element(div2_nodes, "DIV", { class: true });
			var div1_nodes = children(div1);
			span1 = claim_element(div1_nodes, "SPAN", { class: true });
			var span1_nodes = children(span1);
			t5 = claim_text(span1_nodes, "Filter (");
			t6 = claim_text(span1_nodes, t6_value);
			t7 = claim_text(span1_nodes, ")");
			span1_nodes.forEach(detach_dev);
			input = claim_element(div1_nodes, "INPUT", { type: true, class: true });
			div1_nodes.forEach(detach_dev);
			div2_nodes.forEach(detach_dev);
			div3 = claim_element(div5_nodes, "DIV", { class: true });
			var div3_nodes = children(div3);
			a = claim_element(div3_nodes, "A", { class: true, rel: true, href: true });
			var a_nodes = children(a);
			span2 = claim_element(a_nodes, "SPAN", { class: true, "data-tooltip": true });
			var span2_nodes = children(span2);
			claim_component(icon0.$$.fragment, span2_nodes);
			span2_nodes.forEach(detach_dev);
			a_nodes.forEach(detach_dev);
			span3 = claim_element(div3_nodes, "SPAN", { class: true });
			var span3_nodes = children(span3);
			claim_component(icon1.$$.fragment, span3_nodes);
			span3_nodes.forEach(detach_dev);
			claim_component(settings.$$.fragment, div3_nodes);
			div3_nodes.forEach(detach_dev);
			div4 = claim_element(div5_nodes, "DIV", { class: true });
			var div4_nodes = children(div4);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].l(div4_nodes);
			}

			div4_nodes.forEach(detach_dev);
			div5_nodes.forEach(detach_dev);
			div6_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			document.title = "tumblrpx - download";
			attr_dev(img, "alt", "tumblrpx logo");
			if (!src_url_equal(img.src, img_src_value = "logo-192.png")) attr_dev(img, "src", img_src_value);
			attr_dev(img, "class", "svelte-dk7jlv");
			add_location(img, file, 41, 77, 1167);
			attr_dev(span0, "class", "logo svelte-dk7jlv");
			add_location(span0, file, 41, 58, 1148);
			attr_dev(p0, "class", "sub svelte-dk7jlv");
			add_location(p0, file, 41, 230, 1320);
			attr_dev(p1, "class", "sub svelte-dk7jlv");
			add_location(p1, file, 41, 331, 1421);
			attr_dev(div0, "class", "subtitle svelte-dk7jlv");
			add_location(div0, file, 41, 208, 1298);
			attr_dev(span1, "class", "svelte-dk7jlv");
			add_location(span1, file, 41, 430, 1520);
			attr_dev(input, "type", "text");
			attr_dev(input, "class", "svelte-dk7jlv");
			add_location(input, file, 41, 473, 1563);
			attr_dev(div1, "class", "filter");
			add_location(div1, file, 41, 410, 1500);
			attr_dev(div2, "class", "title svelte-dk7jlv");
			add_location(div2, file, 41, 39, 1129);
			attr_dev(span2, "class", "btn tooltip svelte-dk7jlv");
			attr_dev(span2, "data-tooltip", "Home");
			add_location(span2, file, 41, 597, 1687);
			attr_dev(a, "class", "home svelte-dk7jlv");
			attr_dev(a, "rel", "prefetch");
			attr_dev(a, "href", "/home");
			add_location(a, file, 41, 553, 1643);
			attr_dev(span3, "class", "btn svelte-dk7jlv");
			toggle_class(span3, "showSettings", /*showSettings*/ ctx[3]);
			add_location(span3, file, 41, 683, 1773);
			attr_dev(div3, "class", "settings svelte-dk7jlv");
			add_location(div3, file, 41, 531, 1621);
			attr_dev(div4, "class", "imgwrapper svelte-dk7jlv");
			add_location(div4, file, 41, 847, 1937);
			attr_dev(div5, "class", "hero svelte-dk7jlv");
			add_location(div5, file, 41, 21, 1111);
			attr_dev(div6, "class", "wrapper svelte-dk7jlv");
			add_location(div6, file, 41, 0, 1090);
		},
		m: function mount(target, anchor) {
			insert_hydration_dev(target, t0, anchor);
			insert_hydration_dev(target, div6, anchor);
			append_hydration_dev(div6, div5);
			append_hydration_dev(div5, div2);
			append_hydration_dev(div2, span0);
			append_hydration_dev(span0, img);
			append_hydration_dev(div2, t1);
			append_hydration_dev(div2, t2);
			append_hydration_dev(div2, div0);
			append_hydration_dev(div0, p0);
			append_hydration_dev(p0, t3);
			append_hydration_dev(div0, p1);
			append_hydration_dev(p1, t4);
			append_hydration_dev(div2, div1);
			append_hydration_dev(div1, span1);
			append_hydration_dev(span1, t5);
			append_hydration_dev(span1, t6);
			append_hydration_dev(span1, t7);
			append_hydration_dev(div1, input);
			set_input_value(input, /*filterValue*/ ctx[0]);
			append_hydration_dev(div5, div3);
			append_hydration_dev(div3, a);
			append_hydration_dev(a, span2);
			mount_component(icon0, span2, null);
			append_hydration_dev(div3, span3);
			mount_component(icon1, span3, null);
			mount_component(settings, div3, null);
			append_hydration_dev(div5, div4);

			for (let i = 0; i < each_blocks.length; i += 1) {
				if (each_blocks[i]) {
					each_blocks[i].m(div4, null);
				}
			}

			current = true;

			if (!mounted) {
				dispose = [
					listen_dev(input, "input", /*input_input_handler*/ ctx[5]),
					listen_dev(span3, "click", /*toggleSettings*/ ctx[4], false, false, false, false)
				];

				mounted = true;
			}
		},
		p: function update(ctx, [dirty]) {
			if ((!current || dirty & /*$favorite*/ 2) && t2_value !== (t2_value = (/*$favorite*/ ctx[1]
			? `(${Object.keys(/*$favorite*/ ctx[1]).length} items)`
			: '') + "")) set_data_dev(t2, t2_value);

			if ((!current || dirty & /*displayposts*/ 4) && t6_value !== (t6_value = /*displayposts*/ ctx[2].length + "")) set_data_dev(t6, t6_value);

			if (dirty & /*filterValue*/ 1 && input.value !== /*filterValue*/ ctx[0]) {
				set_input_value(input, /*filterValue*/ ctx[0]);
			}

			if (!current || dirty & /*showSettings*/ 8) {
				toggle_class(span3, "showSettings", /*showSettings*/ ctx[3]);
			}

			const settings_changes = {};
			if (dirty & /*showSettings*/ 8) settings_changes.showSettings = /*showSettings*/ ctx[3];
			settings.$set(settings_changes);

			if (dirty & /*displayposts*/ 4) {
				each_value = /*displayposts*/ ctx[2];
				validate_each_argument(each_value);
				let i;

				for (i = 0; i < each_value.length; i += 1) {
					const child_ctx = get_each_context(ctx, each_value, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
					} else {
						each_blocks[i] = create_each_block(child_ctx);
						each_blocks[i].c();
						each_blocks[i].m(div4, null);
					}
				}

				for (; i < each_blocks.length; i += 1) {
					each_blocks[i].d(1);
				}

				each_blocks.length = each_value.length;
			}
		},
		i: function intro(local) {
			if (current) return;
			transition_in(icon0.$$.fragment, local);
			transition_in(icon1.$$.fragment, local);
			transition_in(settings.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(icon0.$$.fragment, local);
			transition_out(icon1.$$.fragment, local);
			transition_out(settings.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t0);
			if (detaching) detach_dev(div6);
			destroy_component(icon0);
			destroy_component(icon1);
			destroy_component(settings);
			destroy_each(each_blocks, detaching);
			mounted = false;
			run_all(dispose);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance($$self, $$props, $$invalidate) {
	let $favorite;
	validate_store(favorite, 'favorite');
	component_subscribe($$self, favorite, $$value => $$invalidate(1, $favorite = $$value));
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots('Download', slots, []);
	favorite.useLocalStorage({});
	let filterValue;
	let displayposts;
	let showSettings = false;

	function toggleSettings() {
		$$invalidate(3, showSettings = !showSettings);
	}

	const writable_props = [];

	Object_1.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<Download> was created with unknown prop '${key}'`);
	});

	function input_input_handler() {
		filterValue = this.value;
		$$invalidate(0, filterValue);
	}

	$$self.$capture_state = () => ({
		Icon,
		faDownload: faCloudDownloadAlt.faCloudDownloadAlt,
		faSettings: faCog.faCog,
		faHome: faHome.faHome,
		Settings,
		favorite,
		filterValue,
		displayposts,
		showSettings,
		toggleSettings,
		$favorite
	});

	$$self.$inject_state = $$props => {
		if ('filterValue' in $$props) $$invalidate(0, filterValue = $$props.filterValue);
		if ('displayposts' in $$props) $$invalidate(2, displayposts = $$props.displayposts);
		if ('showSettings' in $$props) $$invalidate(3, showSettings = $$props.showSettings);
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	$$self.$$.update = () => {
		if ($$self.$$.dirty & /*filterValue, $favorite*/ 3) {
			{
				let tmp;

				if (filterValue) {
					tmp = Object.entries($favorite).filter(item => {
						let details = item[1];

						// poor mans search
						// Find all the `values`, make a giant string and substring match
						return Object.values(details).join(" ").includes(filterValue);
					});

					$$invalidate(2, displayposts = tmp);
				} else {
					$$invalidate(2, displayposts = $favorite ? Object.entries($favorite) : []);
				}
			}
		}
	};

	return [
		filterValue,
		$favorite,
		displayposts,
		showSettings,
		toggleSettings,
		input_input_handler
	];
}

class Download extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance, create_fragment, safe_not_equal, {});

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "Download",
			options,
			id: create_fragment.name
		});
	}
}

export { Download as default };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZG93bmxvYWQuMmI3NTAwZmEuanMiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9yb3V0ZXMvZG93bmxvYWQuc3ZlbHRlIl0sInNvdXJjZXNDb250ZW50IjpbIjxzY3JpcHQ+XG4gIGltcG9ydCBJY29uIGZyb20gXCJmYS1zdmVsdGUvc3JjL0ljb24uc3ZlbHRlXCI7XG4gIGltcG9ydCB7IGZhQ2xvdWREb3dubG9hZEFsdCBhcyBmYURvd25sb2FkIH0gZnJvbSBcIkBmb3J0YXdlc29tZS9mcmVlLXNvbGlkLXN2Zy1pY29ucy9mYUNsb3VkRG93bmxvYWRBbHRcIjtcbiAgaW1wb3J0IHsgZmFDb2cgYXMgZmFTZXR0aW5ncyB9IGZyb20gXCJAZm9ydGF3ZXNvbWUvZnJlZS1zb2xpZC1zdmctaWNvbnMvZmFDb2dcIjtcbiAgaW1wb3J0IHsgZmFIb21lIH0gZnJvbSBcIkBmb3J0YXdlc29tZS9mcmVlLXNvbGlkLXN2Zy1pY29ucy9mYUhvbWVcIjtcblxuICBpbXBvcnQgU2V0dGluZ3MgZnJvbSBcIi4uL2NvbXBvbmVudHMvU2V0dGluZ3Muc3ZlbHRlXCI7XG5cbiAgaW1wb3J0IHsgZmF2b3JpdGUgfSBmcm9tIFwiLi4vX3ByZWZzXCI7XG4gIGZhdm9yaXRlLnVzZUxvY2FsU3RvcmFnZSh7fSk7XG5cbiAgbGV0IGZpbHRlclZhbHVlO1xuICBsZXQgZGlzcGxheXBvc3RzO1xuXG4gIGxldCBzaG93U2V0dGluZ3MgPSBmYWxzZTtcblxuICBmdW5jdGlvbiB0b2dnbGVTZXR0aW5ncygpIHtcbiAgICBzaG93U2V0dGluZ3MgPSAhc2hvd1NldHRpbmdzO1xuICB9XG5cbiAgJDoge1xuICAgIGxldCB0bXA7XG4gICAgaWYgKGZpbHRlclZhbHVlKSB7XG4gICAgICB0bXAgPSBPYmplY3QuZW50cmllcygkZmF2b3JpdGUpLmZpbHRlcigoaXRlbSkgPT4ge1xuICAgICAgICBsZXQgZGV0YWlscyA9IGl0ZW1bMV07XG5cbiAgICAgICAgLy8gcG9vciBtYW5zIHNlYXJjaFxuICAgICAgICAvLyBGaW5kIGFsbCB0aGUgYHZhbHVlc2AsIG1ha2UgYSBnaWFudCBzdHJpbmcgYW5kIHN1YnN0cmluZyBtYXRjaFxuICAgICAgICByZXR1cm4gT2JqZWN0LnZhbHVlcyhkZXRhaWxzKS5qb2luKFwiIFwiKS5pbmNsdWRlcyhmaWx0ZXJWYWx1ZSk7XG4gICAgICB9KTtcbiAgICAgIGRpc3BsYXlwb3N0cyA9IHRtcDtcbiAgICB9IGVsc2Uge1xuICAgICAgZGlzcGxheXBvc3RzID0gJGZhdm9yaXRlID8gT2JqZWN0LmVudHJpZXMoJGZhdm9yaXRlKSA6IFtdO1xuICAgIH1cbiAgfVxuPC9zY3JpcHQ+XG5cbjxzdmVsdGU6aGVhZD5cbiAgPHRpdGxlPnR1bWJscnB4IC0gZG93bmxvYWQ8L3RpdGxlPlxuPC9zdmVsdGU6aGVhZD5cblxuPHRlbXBsYXRlIGxhbmc9XCJwdWdcIj5cbi53cmFwcGVyXG4gIC5oZXJvXG4gICAgLnRpdGxlXG4gICAgICBzcGFuLmxvZ29cbiAgICAgICAgaW1nKGFsdD1cInR1bWJscnB4IGxvZ29cIiwgc3JjPVwibG9nby0xOTIucG5nXCIpXG4gICAgICB8IHR1bWJscnB4IGRvd25sb2FkIHskZmF2b3JpdGUgPyBgKCR7T2JqZWN0LmtleXMoJGZhdm9yaXRlKS5sZW5ndGh9IGl0ZW1zKWAgOiAnJyB9XG4gICAgICAuc3VidGl0bGVcbiAgICAgICAgcC5zdWIgUmlnaHQgY2xpY2sgb24gdGhlIHBhZ2UgKG5vdCBvbiBhbnkgaW1hZ2UpID4gU2F2ZSBhcyA+IFNlbGVjdCBcIldlYnBhZ2UsIENvbXBsZXRlXCIuXG4gICAgICAgIHAuc3ViIEFsdGVybmF0aXZlbHksIGhpdCBDdHJsK1MgPiBTZWxlY3QgXCJXZWJwYWdlLCBDb21wbGV0ZVwiXG4gICAgICAuZmlsdGVyXG4gICAgICAgIHNwYW4gRmlsdGVyICh7ZGlzcGxheXBvc3RzLmxlbmd0aH0pXG4gICAgICAgIGlucHV0KGJpbmQ6dmFsdWU9J3tmaWx0ZXJWYWx1ZX0nLCB0eXBlPVwidGV4dFwiKVxuICAgIC5zZXR0aW5nc1xuICAgICAgYS5ob21lKHJlbD1cInByZWZldGNoXCIsIGhyZWY9XCIvaG9tZVwiKVxuICAgICAgICBzcGFuLmJ0bi50b29sdGlwKGRhdGEtdG9vbHRpcD1cIkhvbWVcIilcbiAgICAgICAgICBJY29uKGljb249XCJ7ZmFIb21lfVwiKVxuXG4gICAgICBzcGFuLmJ0bihvbjpjbGljaz0ne3RvZ2dsZVNldHRpbmdzfScsIGNsYXNzOnNob3dTZXR0aW5ncz0ne3Nob3dTZXR0aW5nc30nKVxuICAgICAgICBJY29uKGljb249XCJ7ZmFTZXR0aW5nc31cIilcbiAgICAgIFNldHRpbmdzKCd7c2hvd1NldHRpbmdzfScpXG5cbiAgICAuaW1nd3JhcHBlclxuICAgICAgK2VhY2goJ2Rpc3BsYXlwb3N0cyBhcyBbdXJsLCBwb3N0XScpXG4gICAgICAgICtpZigncG9zdC5pc19hbGJ1bScpXG4gICAgICAgICAgK2VhY2goJ3Bvc3QucHJldmlldy5pbWcuYWxidW0gYXMgYWxidW0nKVxuICAgICAgICAgICAgK2lmKCdhbGJ1bS5pc19pbWFnZScpXG4gICAgICAgICAgICAgIC5tZWRpYVxuICAgICAgICAgICAgICAgIGltZyhhbHQ9XCJpbWFnZVwiLCBzcmM9J3thbGJ1bS5oaXJlc30nKVxuICAgICAgICAgICAgICArZWxzZSgpXG4gICAgICAgICAgICAgICAgLm1lZGlhXG4gICAgICAgICAgICAgICAgICB2aWRlbyhhdXRvcGxheSwgbG9vcCwgcGxheXNpbmxpbmUsIG11dGVkKVxuICAgICAgICAgICAgICAgICAgICBzb3VyY2Uoc3JjPVwie2FsYnVtLmhpcmVzfVwiKVxuICAgICAgICAgICtlbHNlaWYoJ3Bvc3QuaXNfaW1hZ2UnKVxuICAgICAgICAgICAgLm1lZGlhXG4gICAgICAgICAgICAgIGltZyhhbHQ9XCJpbWFnZVwiLCBzcmM9J3t1cmx9JylcbiAgICAgICAgICArZWxzZWlmKCdwb3N0LmlzX3ZpZGVvJylcbiAgICAgICAgICAgIC5tZWRpYVxuICAgICAgICAgICAgICB2aWRlbyhhdXRvcGxheSwgbG9vcCwgcGxheXNpbmxpbmUsIG11dGVkKVxuICAgICAgICAgICAgICAgICtpZigncG9zdC5wcmV2aWV3LnZpZC53ZWJtJylcbiAgICAgICAgICAgICAgICAgIHNvdXJjZShzcmM9XCJ7cG9zdC5wcmV2aWV3LnZpZC53ZWJtfVwiKVxuICAgICAgICAgICAgICAgICtpZigncG9zdC5wcmV2aWV3LnZpZC5tcDQnKVxuICAgICAgICAgICAgICAgICAgc291cmNlKHNyYz1cIntwb3N0LnByZXZpZXcudmlkLm1wNH1cIilcbjwvdGVtcGxhdGU+XG5cbjxzdHlsZSBsYW5nPVwic2Fzc1wiPlxuQG1peGluIGhvdmVyKClcbiAgQG1lZGlhIG5vdCBhbGwgYW5kIChwb2ludGVyOmNvYXJzZSlcbiAgICAmOmhvdmVyXG4gICAgICBAY29udGVudFxuXG4kdGV4dC1jb2xvcjogI2ZhZmFmYVxuXG4ud3JhcHBlclxuICBoZWlnaHQ6IDEwMHZoXG5cbiAgZGlzcGxheTogZ3JpZFxuICBqdXN0aWZ5LWl0ZW1zOiBjZW50ZXJcbiAgYWxpZ24taXRlbXM6IGNlbnRlclxuXG4gIC5oZXJvXG4gICAgaGVpZ2h0OiAxMDB2aFxuICAgIHdpZHRoOiAxMDAlXG4gICAgZGlzcGxheTogZ3JpZFxuICAgIGp1c3RpZnktaXRlbXM6IGNlbnRlclxuICAgIGFsaWduLWl0ZW1zOiBjZW50ZXJcbiAgICBncmlkLWF1dG8tcm93czogbWF4LWNvbnRlbnRcbiAgICBncmlkLXJvdy1nYXA6IDNyZW1cbiAgICBwYWRkaW5nLXRvcDogNXJlbVxuXG4gICAgLnNldHRpbmdzXG4gICAgICB6LWluZGV4OiAxMFxuICAgICAgcG9zaXRpb246IGFic29sdXRlXG4gICAgICB0b3A6IDBcbiAgICAgIHJpZ2h0OiAwXG4gICAgICBjb2xvcjogJHRleHQtY29sb3JcbiAgICAgIGZvbnQtc2l6ZTogMXJlbVxuICAgICAgcGFkZGluZzogMS41cmVtXG5cbiAgICAgIC5ob21lXG4gICAgICAgIG1hcmdpbi1yaWdodDogN3B4XG5cbiAgICAgIC5idG5cbiAgICAgICAgdXNlci1zZWxlY3Q6IG5vbmVcbiAgICAgICAgY3Vyc29yOiBwb2ludGVyXG4gICAgICAgIGNvbG9yOiByZ2JhKHdoaXRlLCA4MCUpXG5cbiAgICAgICAgJi5zaG93U2V0dGluZ3NcbiAgICAgICAgICBjb2xvcjogd2hpdGVcblxuICAgICAgICBAaW5jbHVkZSBob3ZlcigpXG4gICAgICAgICAgY29sb3I6IHdoaXRlXG5cbiAgICAudGl0bGVcbiAgICAgIHotaW5kZXg6IDEwXG4gICAgICBwb3NpdGlvbjogYWJzb2x1dGVcbiAgICAgIHRvcDogMFxuICAgICAgYmFja2dyb3VuZC1jb2xvcjogcmdiYSgwLCAwLCAwLCAwLjQpXG4gICAgICBjb2xvcjogJHRleHQtY29sb3JcbiAgICAgIGZvbnQtc2l6ZTogMS41cmVtXG4gICAgICBwYWRkaW5nOiAxcmVtXG4gICAgICBib3JkZXItcmFkaXVzOiAzcHhcbiAgICAgIGN1cnNvcjogcG9pbnRlclxuXG4gICAgICBAaW5jbHVkZSBob3ZlcigpXG4gICAgICAgIGJhY2tncm91bmQtY29sb3I6IHJnYmEoMCwgMCwgMCwgMC44KVxuXG4gICAgICAubG9nb1xuICAgICAgICB1c2VyLXNlbGVjdDogbm9uZVxuICAgICAgICBjdXJzb3I6IHBvaW50ZXJcbiAgICAgICAgdG9wOiA1cHhcbiAgICAgICAgcG9zaXRpb246IHJlbGF0aXZlXG4gICAgICAgIG1hcmdpbi1yaWdodDogOXB4XG5cbiAgICAgICAgaW1nXG4gICAgICAgICAgaGVpZ2h0OiAycmVtXG5cbiAgICAgIDpnbG9iYWwoc3ZnKVxuICAgICAgICBtYXJnaW4tcmlnaHQ6IDEwcHhcbiAgICAgICAgdG9wOiAzcHhcbiAgICAgICAgcG9zaXRpb246IHJlbGF0aXZlXG5cbiAgICAgIC5zdWJ0aXRsZVxuICAgICAgICBtYXJnaW4tdG9wOiAxcmVtXG4gICAgICAgIGZvbnQtc2l6ZTogMXJlbVxuICAgICAgICBjb2xvcjogZGFya2VuKCR0ZXh0LWNvbG9yLCAxMCUpXG5cbiAgICAgICAgcC5zdWJcbiAgICAgICAgICBtYXJnaW46IDBcblxuICAgICAgLmZpbHRlclxuICAgICAgICBzcGFuXG4gICAgICAgICAgZm9udC1zaXplOiAxcmVtXG4gICAgICAgICAgbWFyZ2luLXJpZ2h0OiAxMHB4XG5cbiAgICAgICAgaW5wdXRcbiAgICAgICAgICBwYWRkaW5nLWxlZnQ6IDVweFxuICAgICAgICAgIHBhZGRpbmctcmlnaHQ6IDVweFxuICAgICAgICAgIGJvcmRlcjogMXB4IHNvbGlkIHJnYmEod2hpdGUsIDYwJSlcbiAgICAgICAgICBiYWNrZ3JvdW5kLWNvbG9yOiByZ2JhKDAsIDAsIDAsIDApXG4gICAgICAgICAgY29sb3I6IHdoaXRlXG4gICAgICAgICAgaGVpZ2h0OiAxLjVyZW1cblxuICAgIC5pbWd3cmFwcGVyXG4gICAgICBkaXNwbGF5OiBncmlkXG4gICAgICBncmlkLWdhcDogMnJlbVxuICAgICAganVzdGlmeS1jb250ZW50OiBjZW50ZXJcbiAgICAgIGFsaWduLWNvbnRlbnQ6IGNlbnRlclxuXG4gICAgICAubWVkaWFcbiAgICAgICAganVzdGlmeS1zZWxmOiBjZW50ZXJcblxuICAgICAgICBpbWdcbiAgICAgICAgICBtYXgtd2lkdGg6IDEwMCVcblxuICAgICAgICB2aWRlb1xuICAgICAgICAgIG1heC13aWR0aDogMTAwJVxuXG4udG9vbHRpcFxuICBwb3NpdGlvbjogcmVsYXRpdmVcbiAgei1pbmRleDogMlxuICBjdXJzb3I6IHBvaW50ZXJcblxuLnRvb2x0aXBcbiAgJjpiZWZvcmUsICY6YWZ0ZXJcbiAgICB2aXNpYmlsaXR5OiBoaWRkZW5cbiAgICBvcGFjaXR5OiAwXG4gICAgcG9pbnRlci1ldmVudHM6IG5vbmVcblxuICAmOmJlZm9yZVxuICAgIHBvc2l0aW9uOiBhYnNvbHV0ZVxuICAgIGJvdHRvbTogMTIwJVxuICAgIGxlZnQ6IDUwJVxuICAgIG1hcmdpbi1ib3R0b206IDVweFxuICAgIG1hcmdpbi1sZWZ0OiAtMzBweFxuICAgIHBhZGRpbmc6IDVweCA0cHhcbiAgICB3aWR0aDogNjBweFxuICAgIGJvcmRlci1yYWRpdXM6IDNweFxuICAgIGJhY2tncm91bmQtY29sb3I6IGJsYWNrXG4gICAgY29sb3I6ICNmZmZcblxuICAgIGJhY2tncm91bmQtY29sb3I6IHJnYmEod2hpdGUsIDkwJSlcbiAgICBjb2xvcjogYmxhY2tcblxuICAgIGNvbnRlbnQ6IGF0dHIoZGF0YS10b29sdGlwKVxuICAgIHRleHQtYWxpZ246IGNlbnRlclxuICAgIGZvbnQtc2l6ZTogMC44cmVtXG4gICAgbGluZS1oZWlnaHQ6IDEuMlxuXG4gICY6YWZ0ZXJcbiAgICBwb3NpdGlvbjogYWJzb2x1dGVcbiAgICBib3R0b206IDEyMCVcbiAgICBsZWZ0OiA1MCVcbiAgICBtYXJnaW4tbGVmdDogLTVweFxuICAgIHdpZHRoOiAwXG4gICAgYm9yZGVyLXRvcDogNXB4IHNvbGlkICMwMDBcbiAgICBib3JkZXItdG9wOiA1cHggc29saWQgaHNsYSgwLCAwJSwgMjAlLCAwLjkpXG4gICAgYm9yZGVyLXJpZ2h0OiA1cHggc29saWQgdHJhbnNwYXJlbnRcbiAgICBib3JkZXItbGVmdDogNXB4IHNvbGlkIHRyYW5zcGFyZW50XG4gICAgY29udGVudDogXCIgXCJcbiAgICBmb250LXNpemU6IDBcbiAgICBsaW5lLWhlaWdodDogMFxuXG4gICY6aG92ZXJcbiAgICAmOmJlZm9yZSwgJjphZnRlclxuICAgICAgdmlzaWJpbGl0eTogdmlzaWJsZVxuICAgICAgb3BhY2l0eTogMVxuXG48L3N0eWxlPlxuIl0sIm5hbWVzIjpbImZhSG9tZSIsImZhU2V0dGluZ3MiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQXlDa3pDLENBQUEsSUFBQSxTQUFBLFlBQUEsR0FBSSxDQUFDLENBQUEsQ0FBQSxDQUFBLE9BQU8sQ0FBQyxHQUFHLENBQUMsSUFBSSxJQUFBLGlCQUFBLENBQUEsR0FBQSxDQUFBLENBQUE7QUFBaUQsQ0FBQSxJQUFBLFNBQUEsWUFBQSxHQUFJLENBQUMsQ0FBQSxDQUFBLENBQUEsT0FBTyxDQUFDLEdBQUcsQ0FB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
