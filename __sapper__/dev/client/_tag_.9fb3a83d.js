import { S as SvelteComponentDev, i as init, s as safe_not_equal, d as dispatch_dev, v as validate_store, c as component_subscribe, a as validate_slots, b as stores$1, e as create_component, f as claim_component, m as mount_component, t as transition_in, g as transition_out, h as destroy_component, j as empty, k as insert_hydration_dev, l as check_outros, n as detach_dev, o as group_outros } from './client.69a32c37.js';
import { A as API_KEY, q as queryp, g as get_tumblr_posts, F as FullscreenLayout } from './FullscreenLayout.548474f5.js';
import { f as favorite, l as layout } from './Settings.e78f35ef.js';
import './faHome.1e9f426b.js';
import './faEye.80b2d004.js';

/* src/routes/search/[tag].svelte generated by Svelte v3.46.2 */

// (39:0) {#if $layout == 0}
function create_if_block(ctx) {
	let fullscreenlayout;
	let current;

	fullscreenlayout = new FullscreenLayout({
			props: {
				slugstr: /*slugstr*/ ctx[3],
				posts: /*posts*/ ctx[0],
				res: /*res*/ ctx[1],
				after: /*after*/ ctx[2],
				params: /*$page*/ ctx[5].query,
				pageType: "search"
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			create_component(fullscreenlayout.$$.fragment);
		},
		l: function claim(nodes) {
			claim_component(fullscreenlayout.$$.fragment, nodes);
		},
		m: function mount(target, anchor) {
			mount_component(fullscreenlayout, target, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			const fullscreenlayout_changes = {};
			if (dirty & /*slugstr*/ 8) fullscreenlayout_changes.slugstr = /*slugstr*/ ctx[3];
			if (dirty & /*posts*/ 1) fullscreenlayout_changes.posts = /*posts*/ ctx[0];
			if (dirty & /*res*/ 2) fullscreenlayout_changes.res = /*res*/ ctx[1];
			if (dirty & /*after*/ 4) fullscreenlayout_changes.after = /*after*/ ctx[2];
			if (dirty & /*$page*/ 32) fullscreenlayout_changes.params = /*$page*/ ctx[5].query;
			fullscreenlayout.$set(fullscreenlayout_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(fullscreenlayout.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(fullscreenlayout.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(fullscreenlayout, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block.name,
		type: "if",
		source: "(39:0) {#if $layout == 0}",
		ctx
	});

	return block;
}

function create_fragment(ctx) {
	let if_block_anchor;
	let current;
	let if_block = /*$layout*/ ctx[4] == 0 && create_if_block(ctx);

	const block = {
		c: function create() {
			if (if_block) if_block.c();
			if_block_anchor = empty();
		},
		l: function claim(nodes) {
			if (if_block) if_block.l(nodes);
			if_block_anchor = empty();
		},
		m: function mount(target, anchor) {
			if (if_block) if_block.m(target, anchor);
			insert_hydration_dev(target, if_block_anchor, anchor);
			current = true;
		},
		p: function update(ctx, [dirty]) {
			if (/*$layout*/ ctx[4] == 0) {
				if (if_block) {
					if_block.p(ctx, dirty);

					if (dirty & /*$layout*/ 16) {
						transition_in(if_block, 1);
					}
				} else {
					if_block = create_if_block(ctx);
					if_block.c();
					transition_in(if_block, 1);
					if_block.m(if_block_anchor.parentNode, if_block_anchor);
				}
			} else if (if_block) {
				group_outros();

				transition_out(if_block, 1, 1, () => {
					if_block = null;
				});

				check_outros();
			}
		},
		i: function intro(local) {
			if (current) return;
			transition_in(if_block);
			current = true;
		},
		o: function outro(local) {
			transition_out(if_block);
			current = false;
		},
		d: function destroy(detaching) {
			if (if_block) if_block.d(detaching);
			if (detaching) detach_dev(if_block_anchor);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

async function preload({ path, params, query }) {
	if (typeof window === "undefined") return;
	let tag = params.tag;
	let url = `https://api.tumblr.com/v2/tagged?tag=${tag}&api_key=${API_KEY}&${queryp(query)}`;
	let { posts, res, after } = await get_tumblr_posts(url);
	return { posts, after, res, slugstr: tag };
}

function instance($$self, $$props, $$invalidate) {
	let $favorite;
	let $layout;
	let $page;
	validate_store(favorite, 'favorite');
	component_subscribe($$self, favorite, $$value => $$invalidate(7, $favorite = $$value));
	validate_store(layout, 'layout');
	component_subscribe($$self, layout, $$value => $$invalidate(4, $layout = $$value));
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots('U5Btagu5D', slots, []);
	const { page } = stores$1();
	validate_store(page, 'page');
	component_subscribe($$self, page, value => $$invalidate(5, $page = value));
	favorite.useLocalStorage({});
	layout.useLocalStorage(0);
	let { posts = [] } = $$props;
	let { res } = $$props;
	let { after } = $$props;
	let { slugstr } = $$props;

	// Load `favorite` from localstorage
	for (let p of posts) {
		p["favorite"] = !!$favorite[p.url]?.favorite;
	}

	const writable_props = ['posts', 'res', 'after', 'slugstr'];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<U5Btagu5D> was created with unknown prop '${key}'`);
	});

	$$self.$$set = $$props => {
		if ('posts' in $$props) $$invalidate(0, posts = $$props.posts);
		if ('res' in $$props) $$invalidate(1, res = $$props.res);
		if ('after' in $$props) $$invalidate(2, after = $$props.after);
		if ('slugstr' in $$props) $$invalidate(3, slugstr = $$props.slugstr);
	};

	$$self.$capture_state = () => ({
		API_KEY,
		preload,
		FullscreenLayout,
		get_tumblr_posts,
		queryp,
		stores: stores$1,
		page,
		favorite,
		layout,
		posts,
		res,
		after,
		slugstr,
		$favorite,
		$layout,
		$page
	});

	$$self.$inject_state = $$props => {
		if ('posts' in $$props) $$invalidate(0, posts = $$props.posts);
		if ('res' in $$props) $$invalidate(1, res = $$props.res);
		if ('after' in $$props) $$invalidate(2, after = $$props.after);
		if ('slugstr' in $$props) $$invalidate(3, slugstr = $$props.slugstr);
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	return [posts, res, after, slugstr, $layout, $page, page];
}

class U5Btagu5D extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance, create_fragment, safe_not_equal, { posts: 0, res: 1, after: 2, slugstr: 3 });

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "U5Btagu5D",
			options,
			id: create_fragment.name
		});

		const { ctx } = this.$$;
		const props = options.props || {};

		if (/*res*/ ctx[1] === undefined && !('res' in props)) {
			console.warn("<U5Btagu5D> was created without expected prop 'res'");
		}

		if (/*after*/ ctx[2] === undefined && !('after' in props)) {
			console.warn("<U5Btagu5D> was created without expected prop 'after'");
		}

		if (/*slugstr*/ ctx[3] === undefined && !('slugstr' in props)) {
			console.warn("<U5Btagu5D> was created without expected prop 'slugstr'");
		}
	}

	get posts() {
		throw new Error("<U5Btagu5D>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set posts(value) {
		throw new Error("<U5Btagu5D>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get res() {
		throw new Error("<U5Btagu5D>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set res(value) {
		throw new Error("<U5Btagu5D>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get after() {
		throw new Error("<U5Btagu5D>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set after(value) {
		throw new Error("<U5Btagu5D>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get slugstr() {
		throw new Error("<U5Btagu5D>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set slugstr(value) {
		throw new Error("<U5Btagu5D>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

export { U5Btagu5D as default, preload };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiX3RhZ18uOWZiM2E4M2QuanMiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9yb3V0ZXMvc2VhcmNoL1t0YWddLnN2ZWx0ZSJdLCJzb3VyY2VzQ29udGVudCI6WyI8c2NyaXB0IGNvbnRleHQ9XCJtb2R1bGVcIj5cbiAgaW1wb3J0IHsgQVBJX0tFWSB9IGZyb20gJy4uLy4uL2NvbmZpZy5qcyc7XG5cbiAgZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIHByZWxvYWQoeyBwYXRoLCBwYXJhbXMsIHF1ZXJ5IH0pIHtcbiAgICBpZiAodHlwZW9mIHdpbmRvdyA9PT0gXCJ1bmRlZmluZWRcIikgcmV0dXJuO1xuXG4gICAgbGV0IHRhZyA9IHBhcmFtcy50YWc7XG4gICAgbGV0IHVybCA9IGBodHRwczovL2FwaS50dW1ibHIuY29tL3YyL3RhZ2dlZD90YWc9JHt0YWd9JmFwaV9rZXk9JHtBUElfS0VZfSYke3F1ZXJ5cChxdWVyeSl9YDtcblxuICAgIGxldCB7IHBvc3RzLCByZXMsIGFmdGVyIH0gPSBhd2FpdCBnZXRfdHVtYmxyX3Bvc3RzKHVybCk7XG5cbiAgICByZXR1cm4geyBwb3N0cywgYWZ0ZXIsIHJlcywgc2x1Z3N0cjogdGFnIH07XG4gIH1cbjwvc2NyaXB0PlxuXG48c2NyaXB0PlxuICBpbXBvcnQgRnVsbHNjcmVlbkxheW91dCBmcm9tIFwiLi4vLi4vY29tcG9uZW50cy9GdWxsc2NyZWVuTGF5b3V0LnN2ZWx0ZVwiO1xuXG4gIGltcG9ydCB7IGdldF90dW1ibHJfcG9zdHMsIHF1ZXJ5cCB9IGZyb20gXCIuLi8uLi9fdHVtYmxyX3V0aWxzLnRzXCI7XG5cbiAgaW1wb3J0IHsgc3RvcmVzIH0gZnJvbSBcIkBzYXBwZXIvYXBwXCI7XG4gIGNvbnN0IHsgcGFnZSB9ID0gc3RvcmVzKCk7XG5cbiAgaW1wb3J0IHsgZmF2b3JpdGUsIGxheW91dCB9IGZyb20gXCIuLi8uLi9fcHJlZnNcIjtcbiAgZmF2b3JpdGUudXNlTG9jYWxTdG9yYWdlKHt9KTtcbiAgbGF5b3V0LnVzZUxvY2FsU3RvcmFnZSgwKTtcblxuICBleHBvcnQgbGV0IHBvc3RzID0gW107XG4gIGV4cG9ydCBsZXQgcmVzO1xuICBleHBvcnQgbGV0IGFmdGVyO1xuICBleHBvcnQgbGV0IHNsdWdzdHI7XG5cbiAgLy8gTG9hZCBgZmF2b3JpdGVgIGZyb20gbG9jYWxzdG9yYWdlXG4gIGZvciAobGV0IHAgb2YgcG9zdHMpIHtcbiAgICBwW1wiZmF2b3JpdGVcIl0gPSAhISgkZmF2b3JpdGVbcC51cmxdPy5mYXZvcml0ZSk7XG4gIH1cbjwvc2NyaXB0PlxuXG48dGVtcGxhdGUgbGFuZz1cInB1Z1wiPlxuICAraWYoJyRsYXlvdXQgPT0gMCcpXG4gICAgRnVsbHNjcmVlbkxheW91dCh7c2x1Z3N0cn0sIHtwb3N0c30sIHtyZXN9LCB7YWZ0ZXJ9LCBwYXJhbXM9J3skcGFnZS5xdWVyeX0nLCBwYWdlVHlwZT0nc2VhcmNoJylcbjwvdGVtcGxhdGU+Il0sIm5hbWVzIjpbInN0b3JlcyJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7OztzQkFzQzZFLEdBQUssSUFBQyxLQUFLOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozt5RUFBWCxHQUFLLElBQUMsS0FBSzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs0QkFBbkYsR0FBTyxPQUFJLENBQUM7Ozs7Ozs7Ozs7Ozs7Ozs7O21CQUFaLEdBQU8sT0FBSSxDQUFDOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O2VBbkNPLE9BQU8sR0FBRyxJQUFJLEVBQUUsTUFBTSxFQUFFLEtBQUs7WUFDdEMsTUFBTSxLQUFLLFdBQVc7S0FFN0IsR0FBRyxHQUFHLE1BQU0sQ0FBQyxHQUFHO0tBQ2hCLEdBQUcsMkNBQTJDLEdBQUcsWUFBWSxPQUFPLElBQUksTUFBTSxDQUFDLEtBQUs7T0FFbEYsS0FBSyxFQUFFLEdBQUcsRUFBRSxLQUFLLFdBQVcsZ0JBQWdCLENBQUMsR0FBRztVQUU3QyxLQUFLLEVBQUUsS0FBSyxFQUFFLEdBQUcsRUFBRSxPQUFPLEVBQUUsR0FBRzs7Ozs7Ozs7Ozs7OztTQVVsQyxJQUFJLEtBQUtBLFFBQU07OztDQUd2QixRQUFRLENBQUMsZUFBZTtDQUN4QixNQUFNLENBQUMsZUFBZSxDQUFDLENBQUM7T0FFYixLQUFLO09BQ0wsR0FBRztPQUNILEtBQUs7T0FDTCxPQUFPOzs7VUFHVCxDQUFDLElBQUksS0FBSztFQUNqQixDQUFDLENBQUMsVUFBVSxNQUFPLFNBQVMsQ0FBQyxDQUFDLENBQUMsR0FBRyxHQUFHLFFBQVE7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7In0=
