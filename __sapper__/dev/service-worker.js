(function () {
	'use strict';

	// This file is generated by Sapper â€” do not edit it!
	const timestamp = 1754998675392;

	const files = [
		"/service-worker-index.html",
		"/favicon.png",
		"/global.css",
		"/logo-192.png",
		"/logo-512.png",
		"/manifest.json"
	];

	const shell = [
		"/client/client.e786425c.js",
		"/client/inject_styles.803b7e80.js",
		"/client/index.8af58648.js",
		"/client/FullscreenLayout.79611234.js",
		"/client/Settings.c1a6d999.js",
		"/client/faHome.a20aef62.js",
		"/client/download.94a0bf3c.js",
		"/client/health.dd44b9ed.js",
		"/client/_tag_.799cc036.js",
		"/client/home.685a35b5.js",
		"/client/_username_.22f83ca0.js",
		"/client/index.5d285fcb.js",
		"/client/_slug_.079eb173.js",
		"/client/sapper-dev-client.1e7a4a5e.js"
	];

	// `shell` is an array of all the files generated by the bundler,
	// `files` is an array of everything in the `static` directory
	const to_cache = shell.concat(files);
	const cached = new Set(to_cache);

	self.addEventListener('install', (event) => {
	  self.skipWaiting();
	});

	self.addEventListener('activate', (event) => {
	  event.waitUntil(self.clients.claim());
	  self.registration.unregister();
	});

	self.addEventListener(
	  "fetch",
	  (event) => {
	    if (event.request.method !== "GET" || event.request.headers.has("range")) {
	      return;
	    }

	    const url = new URL(event.request.url);

	    // don't try to handle e.g. data: URIs
	    if (!url.protocol.startsWith("http")) {
	      return;
	    }

	    // ignore dev server requests
	    if (
	      url.hostname === self.location.hostname && url.port !== self.location.port
	    ) {
	      return;
	    }

	    // always serve static files and bundler-generated assets from cache
	    if (url.host === self.location.host && cached.has(url.pathname)) {
	      event.respondWith(
	        caches.match(event.request).then((response) => {
	          return response || fetch(event.request);
	        })
	      );
	      return;
	    }

	    // for pages, you might want to serve a shell `service-worker-index.html` file,
	    // which Sapper has generated for you. It's not right for every
	    // app, but if it's right for yours then uncomment this section
	    /*
		if (url.origin === self.origin && routes.find(route => route.pattern.test(url.pathname))) {
			event.respondWith(caches.match('/service-worker-index.html'));
			return;
		}
		*/

	    if (event.request.cache === "only-if-cached") {
	      return;
	    }

	    if (event.request.destination == "image") {
	      return;
	    }

	    // for everything else, try the network first, falling back to
	    // cache if the user is offline. (If the pages never change, you
	    // might prefer a cache-first approach to a network-first one.)
	    event.respondWith(
	      caches
	        .open(`offline${timestamp}`)
	        .then(
	          async (cache) => {
	            try {
	              const response = await fetch(event.request);
	              cache.put(event.request, response.clone());
	              return response;
	            } catch (err) {
	              const response = await cache.match(event.request);
	              if (response) {
	                return response;
	              }

	              throw err;
	            }
	          },
	        ),
	    );
	  },
	);

})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
