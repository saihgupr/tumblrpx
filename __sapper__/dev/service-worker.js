(function () {
	'use strict';

	// This file is generated by Sapper â€” do not edit it!
	const timestamp = 1754578762547;

	const files = [
		"/service-worker-index.html",
		"/favicon.png",
		"/global.css",
		"/logo-192.png",
		"/logo-512.png",
		"/manifest.json"
	];

	const shell = [
		"/client/client.1606be1f.js",
		"/client/inject_styles.803b7e80.js",
		"/client/index.0b47fe30.js",
		"/client/FullscreenLayout.8c9d65d5.js",
		"/client/Settings.2b093148.js",
		"/client/faHome.e8b8c34b.js",
		"/client/faEye.273a49b7.js",
		"/client/download.9479c507.js",
		"/client/health.e14b7d7a.js",
		"/client/_tag_.e3145108.js",
		"/client/home.52e580de.js",
		"/client/_username_.26fcf7a4.js",
		"/client/index.e091be61.js",
		"/client/_slug_.f34e8f9d.js",
		"/client/sapper-dev-client.1e7a4a5e.js"
	];

	// `shell` is an array of all the files generated by the bundler,
	// `files` is an array of everything in the `static` directory
	const to_cache = shell.concat(files);
	const cached = new Set(to_cache);

	self.addEventListener('install', (event) => {
	  self.skipWaiting();
	});

	self.addEventListener('activate', (event) => {
	  event.waitUntil(self.clients.claim());
	  self.registration.unregister();
	});

	self.addEventListener(
	  "fetch",
	  (event) => {
	    if (event.request.method !== "GET" || event.request.headers.has("range")) {
	      return;
	    }

	    const url = new URL(event.request.url);

	    // don't try to handle e.g. data: URIs
	    if (!url.protocol.startsWith("http")) {
	      return;
	    }

	    // ignore dev server requests
	    if (
	      url.hostname === self.location.hostname && url.port !== self.location.port
	    ) {
	      return;
	    }

	    // always serve static files and bundler-generated assets from cache
	    if (url.host === self.location.host && cached.has(url.pathname)) {
	      event.respondWith(
	        caches.match(event.request).then((response) => {
	          return response || fetch(event.request);
	        })
	      );
	      return;
	    }

	    // for pages, you might want to serve a shell `service-worker-index.html` file,
	    // which Sapper has generated for you. It's not right for every
	    // app, but if it's right for yours then uncomment this section
	    /*
		if (url.origin === self.origin && routes.find(route => route.pattern.test(url.pathname))) {
			event.respondWith(caches.match('/service-worker-index.html'));
			return;
		}
		*/

	    if (event.request.cache === "only-if-cached") {
	      return;
	    }

	    if (event.request.destination == "image") {
	      return;
	    }

	    // for everything else, try the network first, falling back to
	    // cache if the user is offline. (If the pages never change, you
	    // might prefer a cache-first approach to a network-first one.)
	    event.respondWith(
	      caches
	        .open(`offline${timestamp}`)
	        .then(
	          async (cache) => {
	            try {
	              const response = await fetch(event.request);
	              cache.put(event.request, response.clone());
	              return response;
	            } catch (err) {
	              const response = await cache.match(event.request);
	              if (response) {
	                return response;
	              }

	              throw err;
	            }
	          },
	        ),
	    );
	  },
	);

})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2VydmljZS13b3JrZXIuanMiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9ub2RlX21vZHVsZXMvQHNhcHBlci9zZXJ2aWNlLXdvcmtlci5qcyIsIi4uLy4uL3NyYy9zZXJ2aWNlLXdvcmtlci5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBUaGlzIGZpbGUgaXMgZ2VuZXJhdGVkIGJ5IFNhcHBlciDigJQgZG8gbm90IGVkaXQgaXQhXG5leHBvcnQgY29uc3QgdGltZXN0YW1wID0gMTc1NDU3ODc2MjU0NztcblxuZXhwb3J0IGNvbnN0IGZpbGVzID0gW1xuXHRcIi9zZXJ2aWNlLXdvcmtlci1pbmRleC5odG1sXCIsXG5cdFwiL2Zhdmljb24ucG5nXCIsXG5cdFwiL2dsb2JhbC5jc3NcIixcblx0XCIvbG9nby0xOTIucG5nXCIsXG5cdFwiL2xvZ28tNTEyLnBuZ1wiLFxuXHRcIi9tYW5pZmVzdC5qc29uXCJcbl07XG5leHBvcnQgeyBmaWxlcyBhcyBhc3NldHMgfTsgLy8gbGVnYWN5XG5cbmV4cG9ydCBjb25zdCBzaGVsbCA9IFtcblx0XCIvY2xpZW50L2NsaWVudC4xNjA2YmUxZi5qc1wiLFxuXHRcIi9jbGllbnQvaW5qZWN0X3N0eWxlcy44MDNiN2U4MC5qc1wiLFxuXHRcIi9jbGllbnQvaW5kZXguMGI0N2ZlMzAuanNcIixcblx0XCIvY2xpZW50L0Z1bGxzY3JlZW5MYXlvdXQuOGM5ZDY1ZDUuanNcIixcblx0XCIvY2xpZW50L1NldHRpbmdzLjJiMDkzMTQ4LmpzXCIsXG5cdFwiL2NsaWVudC9mYUhvbWUuZThiOGMzNGIuanNcIixcblx0XCIvY2xpZW50L2ZhRXllLjI3M2E0OWI3LmpzXCIsXG5cdFwiL2NsaWVudC9kb3dubG9hZC45NDc5YzUwNy5qc1wiLFxuXHRcIi9jbGllbnQvaGVhbHRoLmUxNGI3ZDdhLmpzXCIsXG5cdFwiL2NsaWVudC9fdGFnXy5lMzE0NTEwOC5qc1wiLFxuXHRcIi9jbGllbnQvaG9tZS41MmU1ODBkZS5qc1wiLFxuXHRcIi9jbGllbnQvX3VzZXJuYW1lXy4yNmZjZjdhNC5qc1wiLFxuXHRcIi9jbGllbnQvaW5kZXguZTA5MWJlNjEuanNcIixcblx0XCIvY2xpZW50L19zbHVnXy5mMzRlOGY5ZC5qc1wiLFxuXHRcIi9jbGllbnQvc2FwcGVyLWRldi1jbGllbnQuMWU3YTRhNWUuanNcIlxuXTtcblxuZXhwb3J0IGNvbnN0IHJvdXRlcyA9IFtcblx0eyBwYXR0ZXJuOiAvXlxcLyQvIH0sXG5cdHsgcGF0dGVybjogL15cXC9kb3dubG9hZFxcLz8kLyB9LFxuXHR7IHBhdHRlcm46IC9eXFwvaGVhbHRoXFwvPyQvIH0sXG5cdHsgcGF0dGVybjogL15cXC9zZWFyY2hcXC8oW14vXSs/KVxcLz8kLyB9LFxuXHR7IHBhdHRlcm46IC9eXFwvaG9tZVxcLz8kLyB9LFxuXHR7IHBhdHRlcm46IC9eXFwvdXNlclxcLyhbXi9dKz8pXFwvPyQvIH0sXG5cdHsgcGF0dGVybjogL15cXC90XFwvKFteL10rPylcXC8/JC8gfSxcblx0eyBwYXR0ZXJuOiAvXlxcL3RcXC8oW14vXSs/KVxcLyhbXi9dKz8pXFwvPyQvIH1cbl07IiwiaW1wb3J0IHsgdGltZXN0YW1wLCBmaWxlcywgc2hlbGwsIHJvdXRlcyB9IGZyb20gXCJAc2FwcGVyL3NlcnZpY2Utd29ya2VyXCI7XG5cbmNvbnN0IEFTU0VUUyA9IGBjYWNoZSR7dGltZXN0YW1wfWA7XG5cbi8vIGBzaGVsbGAgaXMgYW4gYXJyYXkgb2YgYWxsIHRoZSBmaWxlcyBnZW5lcmF0ZWQgYnkgdGhlIGJ1bmRsZXIsXG4vLyBgZmlsZXNgIGlzIGFuIGFycmF5IG9mIGV2ZXJ5dGhpbmcgaW4gdGhlIGBzdGF0aWNgIGRpcmVjdG9yeVxuY29uc3QgdG9fY2FjaGUgPSBzaGVsbC5jb25jYXQoZmlsZXMpO1xuY29uc3QgY2FjaGVkID0gbmV3IFNldCh0b19jYWNoZSk7XG5cbnNlbGYuYWRkRXZlbnRMaXN0ZW5lcignaW5zdGFsbCcsIChldmVudCkgPT4ge1xuICBzZWxmLnNraXBXYWl0aW5nKCk7XG59KTtcblxuc2VsZi5hZGRFdmVudExpc3RlbmVyKCdhY3RpdmF0ZScsIChldmVudCkgPT4ge1xuICBldmVudC53YWl0VW50aWwoc2VsZi5jbGllbnRzLmNsYWltKCkpO1xuICBzZWxmLnJlZ2lzdHJhdGlvbi51bnJlZ2lzdGVyKCk7XG59KTtcblxuc2VsZi5hZGRFdmVudExpc3RlbmVyKFxuICBcImZldGNoXCIsXG4gIChldmVudCkgPT4ge1xuICAgIGlmIChldmVudC5yZXF1ZXN0Lm1ldGhvZCAhPT0gXCJHRVRcIiB8fCBldmVudC5yZXF1ZXN0LmhlYWRlcnMuaGFzKFwicmFuZ2VcIikpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBjb25zdCB1cmwgPSBuZXcgVVJMKGV2ZW50LnJlcXVlc3QudXJsKTtcblxuICAgIC8vIGRvbid0IHRyeSB0byBoYW5kbGUgZS5nLiBkYXRhOiBVUklzXG4gICAgaWYgKCF1cmwucHJvdG9jb2wuc3RhcnRzV2l0aChcImh0dHBcIikpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICAvLyBpZ25vcmUgZGV2IHNlcnZlciByZXF1ZXN0c1xuICAgIGlmIChcbiAgICAgIHVybC5ob3N0bmFtZSA9PT0gc2VsZi5sb2NhdGlvbi5ob3N0bmFtZSAmJiB1cmwucG9ydCAhPT0gc2VsZi5sb2NhdGlvbi5wb3J0XG4gICAgKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgLy8gYWx3YXlzIHNlcnZlIHN0YXRpYyBmaWxlcyBhbmQgYnVuZGxlci1nZW5lcmF0ZWQgYXNzZXRzIGZyb20gY2FjaGVcbiAgICBpZiAodXJsLmhvc3QgPT09IHNlbGYubG9jYXRpb24uaG9zdCAmJiBjYWNoZWQuaGFzKHVybC5wYXRobmFtZSkpIHtcbiAgICAgIGV2ZW50LnJlc3BvbmRXaXRoKFxuICAgICAgICBjYWNoZXMubWF0Y2goZXZlbnQucmVxdWVzdCkudGhlbigocmVzcG9uc2UpID0+IHtcbiAgICAgICAgICByZXR1cm4gcmVzcG9uc2UgfHwgZmV0Y2goZXZlbnQucmVxdWVzdCk7XG4gICAgICAgIH0pXG4gICAgICApO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIC8vIGZvciBwYWdlcywgeW91IG1pZ2h0IHdhbnQgdG8gc2VydmUgYSBzaGVsbCBgc2VydmljZS13b3JrZXItaW5kZXguaHRtbGAgZmlsZSxcbiAgICAvLyB3aGljaCBTYXBwZXIgaGFzIGdlbmVyYXRlZCBmb3IgeW91LiBJdCdzIG5vdCByaWdodCBmb3IgZXZlcnlcbiAgICAvLyBhcHAsIGJ1dCBpZiBpdCdzIHJpZ2h0IGZvciB5b3VycyB0aGVuIHVuY29tbWVudCB0aGlzIHNlY3Rpb25cbiAgICAvKlxuXHRpZiAodXJsLm9yaWdpbiA9PT0gc2VsZi5vcmlnaW4gJiYgcm91dGVzLmZpbmQocm91dGUgPT4gcm91dGUucGF0dGVybi50ZXN0KHVybC5wYXRobmFtZSkpKSB7XG5cdFx0ZXZlbnQucmVzcG9uZFdpdGgoY2FjaGVzLm1hdGNoKCcvc2VydmljZS13b3JrZXItaW5kZXguaHRtbCcpKTtcblx0XHRyZXR1cm47XG5cdH1cblx0Ki9cblxuICAgIGlmIChldmVudC5yZXF1ZXN0LmNhY2hlID09PSBcIm9ubHktaWYtY2FjaGVkXCIpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBpZiAoZXZlbnQucmVxdWVzdC5kZXN0aW5hdGlvbiA9PSBcImltYWdlXCIpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICAvLyBmb3IgZXZlcnl0aGluZyBlbHNlLCB0cnkgdGhlIG5ldHdvcmsgZmlyc3QsIGZhbGxpbmcgYmFjayB0b1xuICAgIC8vIGNhY2hlIGlmIHRoZSB1c2VyIGlzIG9mZmxpbmUuIChJZiB0aGUgcGFnZXMgbmV2ZXIgY2hhbmdlLCB5b3VcbiAgICAvLyBtaWdodCBwcmVmZXIgYSBjYWNoZS1maXJzdCBhcHByb2FjaCB0byBhIG5ldHdvcmstZmlyc3Qgb25lLilcbiAgICBldmVudC5yZXNwb25kV2l0aChcbiAgICAgIGNhY2hlc1xuICAgICAgICAub3Blbihgb2ZmbGluZSR7dGltZXN0YW1wfWApXG4gICAgICAgIC50aGVuKFxuICAgICAgICAgIGFzeW5jIChjYWNoZSkgPT4ge1xuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBmZXRjaChldmVudC5yZXF1ZXN0KTtcbiAgICAgICAgICAgICAgY2FjaGUucHV0KGV2ZW50LnJlcXVlc3QsIHJlc3BvbnNlLmNsb25lKCkpO1xuICAgICAgICAgICAgICByZXR1cm4gcmVzcG9uc2U7XG4gICAgICAgICAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgICAgICAgICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBjYWNoZS5tYXRjaChldmVudC5yZXF1ZXN0KTtcbiAgICAgICAgICAgICAgaWYgKHJlc3BvbnNlKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHJlc3BvbnNlO1xuICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgdGhyb3cgZXJyO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0sXG4gICAgICAgICksXG4gICAgKTtcbiAgfSxcbik7XG4iXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0NBQUE7Q0FDTyxNQUFNLFNBQVMsR0FBRyxhQUFhLENBQUM7QUFDdkM7Q0FDTyxNQUFNLEtBQUssR0FBRztDQUNyQixDQUFDLDRCQUE0QjtDQUM3QixDQUFDLGNBQWM7Q0FDZixDQUFDLGFBQWE7Q0FDZCxDQUFDLGVBQWU7Q0FDaEIsQ0FBQyxlQUFlO0NBQ2hCLENBQUMsZ0JBQWdCO0NBQ2pCLENBQUMsQ0FBQztBQUVGO0NBQ08sTUFBTSxLQUFLLEdBQUc7Q0FDckIsQ0FBQyw0QkFBNEI7Q0FDN0IsQ0FBQyxtQ0FBbUM7Q0FDcEMsQ0FBQywyQkFBMkI7Q0FDNUIsQ0FBQyxzQ0FBc0M7Q0FDdkMsQ0FBQyw4QkFBOEI7Q0FDL0IsQ0FBQyw0QkFBNEI7Q0FDN0IsQ0FBQywyQkFBMkI7Q0FDNUIsQ0FBQyw4QkFBOEI7Q0FDL0IsQ0FBQyw0QkFBNEI7Q0FDN0IsQ0FBQywyQkFBMkI7Q0FDNUIsQ0FBQywwQkFBMEI7Q0FDM0IsQ0FBQyxnQ0FBZ0M7Q0FDakMsQ0FBQywyQkFBMkI7Q0FDNUIsQ0FBQyw0QkFBNEI7Q0FDN0IsQ0FBQyx1Q0FBdUM7Q0FDeEMsQ0FBQzs7Q0N6QkQ7Q0FDQTtDQUNBLE1BQU0sUUFBUSxHQUFHLEtBQUssQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLENBQUM7Q0FDckMsTUFBTSxNQUFNLEdBQUcsSUFBSSxHQUFHLENBQUMsUUFBUSxDQUFDLENBQUM7QUFDakM7Q0FDQSxJQUFJLENBQUMsZ0JBQWdCLENBQUMsU0FBUyxFQUFFLENBQUMsS0FBSyxLQUFLO0NBQzVDLEVBQUUsSUFBSSxDQUFDLFdBQVcsRUFBRSxDQUFDO0NBQ3JCLENBQUMsQ0FBQyxDQUFDO0FBQ0g7Q0FDQSxJQUFJLENBQUMsZ0JBQWdCLENBQUMsVUFBVSxFQUFFLENBQUMsS0FBSyxLQUFLO0NBQzdDLEVBQUUsS0FBSyxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLEtBQUssRUFBRSxDQUFDLENBQUM7Q0FDeEMsRUFBRSxJQUFJLENBQUMsWUFBWSxDQUFDLFVBQVUsRUFBRSxDQUFDO0NBQ2pDLENBQUMsQ0FBQyxDQUFDO0FBQ0g7Q0FDQSxJQUFJLENBQUMsZ0JBQWdCO0NBQ3JCLEVBQUUsT0FBTztDQUNULEVBQUUsQ0FBQyxLQUFLLEtBQUs7Q0FDYixJQUFJLElBQUksS0FBSyxDQUFDLE9BQU8sQ0FBQyxNQUFNLEtBQUssS0FBSyxJQUFJLEtBQUssQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxPQUFPLENBQUMsRUFBRTtDQUM5RSxNQUFNLE9BQU87Q0FDYixLQUFLO0FBQ0w7Q0FDQSxJQUFJLE1BQU0sR0FBRyxHQUFHLElBQUksR0FBRyxDQUFDLEtBQUssQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLENBQUM7QUFDM0M7Q0FDQTtDQUNBLElBQUksSUFBSSxDQUFDLEdBQUcsQ0FBQyxRQUFRLENBQUMsVUFBVSxDQUFDLE1BQU0sQ0FBQyxFQUFFO0NBQzFDLE1BQU0sT0FBTztDQUNiLEtBQUs7QUFDTDtDQUNBO0NBQ0EsSUFBSTtDQUNKLE1BQU0sR0FBRyxDQUFDLFFBQVEsS0FBSyxJQUFJLENBQUMsUUFBUSxDQUFDLFFBQVEsSUFBSSxHQUFHLENBQUMsSUFBSSxLQUFLLElBQUksQ0FBQyxRQUFRLENBQUMsSUFBSTtDQUNoRixNQUFNO0NBQ04sTUFBTSxPQUFPO0NBQ2IsS0FBSztBQUNMO0NBQ0E7Q0FDQSxJQUFJLElBQUksR0FBRyxDQUFDLElBQUksS0FBSyxJQUFJLENBQUMsUUFBUSxDQUFDLElBQUksSUFBSSxNQUFNLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxRQUFRLENBQUMsRUFBRTtDQUNyRSxNQUFNLEtBQUssQ0FBQyxXQUFXO0NBQ3ZCLFFBQVEsTUFBTSxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsUUFBUSxLQUFLO0NBQ3ZELFVBQVUsT0FBTyxRQUFRLElBQUksS0FBSyxDQUFDLEtBQUssQ0FBQyxPQUFPLENBQUMsQ0FBQztDQUNsRCxTQUFTLENBQUM7Q0FDVixPQUFPLENBQUM7Q0FDUixNQUFNLE9BQU87Q0FDYixLQUFLO0FBQ0w7Q0FDQTtDQUNBO0NBQ0E7Q0FDQTtDQUNBO0NBQ0E7Q0FDQTtDQUNBO0NBQ0E7QUFDQTtDQUNBLElBQUksSUFBSSxLQUFLLENBQUMsT0FBTyxDQUFDLEtBQUssS0FBSyxnQkFBZ0IsRUFBRTtDQUNsRCxNQUFNLE9BQU87Q0FDYixLQUFLO0FBQ0w7Q0FDQSxJQUFJLElBQUksS0FBSyxDQUFDLE9BQU8sQ0FBQyxXQUFXLElBQUksT0FBTyxFQUFFO0NBQzlDLE1BQU0sT0FBTztDQUNiLEtBQUs7QUFDTDtDQUNBO0NBQ0E7Q0FDQTtDQUNBLElBQUksS0FBSyxDQUFDLFdBQVc7Q0FDckIsTUFBTSxNQUFNO0NBQ1osU0FBUyxJQUFJLENBQUMsQ0FBQyxPQUFPLEVBQUUsU0FBUyxDQUFDLENBQUMsQ0FBQztDQUNwQyxTQUFTLElBQUk7Q0FDYixVQUFVLE9BQU8sS0FBSyxLQUFLO0NBQzNCLFlBQVksSUFBSTtDQUNoQixjQUFjLE1BQU0sUUFBUSxHQUFHLE1BQU0sS0FBSyxDQUFDLEtBQUssQ0FBQyxPQUFPLENBQUMsQ0FBQztDQUMxRCxjQUFjLEtBQUssQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLE9BQU8sRUFBRSxRQUFRLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztDQUN6RCxjQUFjLE9BQU8sUUFBUSxDQUFDO0NBQzlCLGFBQWEsQ0FBQyxPQUFPLEdBQUcsRUFBRTtDQUMxQixjQUFjLE1BQU0sUUFBUSxHQUFHLE1BQU0sS0FBSyxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDLENBQUM7Q0FDaEUsY0FBYyxJQUFJLFFBQVEsRUFBRTtDQUM1QixnQkFBZ0IsT0FBTyxRQUFRLENBQUM7Q0FDaEMsZUFBZTtBQUNmO0NBQ0EsY0FBYyxNQUFNLEdBQUcsQ0FBQztDQUN4QixhQUFhO0NBQ2IsV0FBVztDQUNYLFNBQVM7Q0FDVCxLQUFLLENBQUM7Q0FDTixHQUFHO0NBQ0gsQ0FBQzs7Ozs7OyJ9
