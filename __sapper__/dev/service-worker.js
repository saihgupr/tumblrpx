(function () {
	'use strict';

	// This file is generated by Sapper â€” do not edit it!
	const timestamp = 1755002086718;

	const files = [
		"/service-worker-index.html",
		"/favicon.png",
		"/global.css",
		"/logo-192.png",
		"/logo-512.png",
		"/manifest.json"
	];

	const shell = [
		"/client/client.f78fef6e.js",
		"/client/inject_styles.803b7e80.js",
		"/client/index.bf2d8038.js",
		"/client/FullscreenLayout.164e5117.js",
		"/client/Settings.5d1191e4.js",
		"/client/faHome.6f4183a9.js",
		"/client/download.c03e8799.js",
		"/client/health.dd335748.js",
		"/client/_tag_.a5c405cf.js",
		"/client/home.1ddbd5b8.js",
		"/client/_username_.f823a2d5.js",
		"/client/index.585d1f7e.js",
		"/client/_slug_.2337f86c.js"
	];

	// `shell` is an array of all the files generated by the bundler,
	// `files` is an array of everything in the `static` directory
	const to_cache = shell.concat(files);
	const cached = new Set(to_cache);

	self.addEventListener('install', (event) => {
	  self.skipWaiting();
	});

	self.addEventListener('activate', (event) => {
	  event.waitUntil(self.clients.claim());
	  self.registration.unregister();
	});

	self.addEventListener(
	  "fetch",
	  (event) => {
	    if (event.request.method !== "GET" || event.request.headers.has("range")) {
	      return;
	    }

	    const url = new URL(event.request.url);

	    // don't try to handle e.g. data: URIs
	    if (!url.protocol.startsWith("http")) {
	      return;
	    }

	    // ignore dev server requests
	    if (
	      url.hostname === self.location.hostname && url.port !== self.location.port
	    ) {
	      return;
	    }

	    // always serve static files and bundler-generated assets from cache
	    if (url.host === self.location.host && cached.has(url.pathname)) {
	      event.respondWith(
	        caches.match(event.request).then((response) => {
	          return response || fetch(event.request);
	        })
	      );
	      return;
	    }

	    // for pages, you might want to serve a shell `service-worker-index.html` file,
	    // which Sapper has generated for you. It's not right for every
	    // app, but if it's right for yours then uncomment this section
	    /*
		if (url.origin === self.origin && routes.find(route => route.pattern.test(url.pathname))) {
			event.respondWith(caches.match('/service-worker-index.html'));
			return;
		}
		*/

	    if (event.request.cache === "only-if-cached") {
	      return;
	    }

	    if (event.request.destination == "image") {
	      return;
	    }

	    // for everything else, try the network first, falling back to
	    // cache if the user is offline. (If the pages never change, you
	    // might prefer a cache-first approach to a network-first one.)
	    event.respondWith(
	      caches
	        .open(`offline${timestamp}`)
	        .then(
	          async (cache) => {
	            try {
	              const response = await fetch(event.request);
	              cache.put(event.request, response.clone());
	              return response;
	            } catch (err) {
	              const response = await cache.match(event.request);
	              if (response) {
	                return response;
	              }

	              throw err;
	            }
	          },
	        ),
	    );
	  },
	);

})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
